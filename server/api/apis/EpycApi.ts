/* tslint:disable */
/* eslint-disable */
/**
 * EPYC API
 * epyc API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import * as Express from 'express';

import {
    FramePlayData,
    FramePlayDataFromJSON,
    FramePlayDataToJSON,
    FramePlayTitleRequest,
    FramePlayTitleRequestFromJSON,
    FramePlayTitleRequestToJSON,
    Game,
    GameFromJSON,
    GameToJSON,
} from '../models';

export interface GetFramePlayDataParams {
     gameName: string;
     frameId: string;
}
export interface GetGameParams {
     gameName: string;
}
export interface GetGamesParams {
     channelId?: string;
     channelService?: string;
     sampleSize?: number;
     limit?: number;
}
export interface PutFrameImageParams {
     gameName: string;
     frameId: string;
     body: Blob;
}
export interface PutFrameTitleParams {
     gameName: string;
     frameId: string;
     framePlayTitleRequest: FramePlayTitleRequest;
}

/**
 * no description
 */
export abstract class EpycApiBase {

    router = Express.Router()

    /**
     */
    protected abstract getFramePlayData(params: GetFramePlayDataParams, context: runtime.Context): Promise<FramePlayData>;

    /**
     */
    protected abstract getGame(params: GetGameParams, context: runtime.Context): Promise<Game>;

    /**
     */
    protected abstract getGames(params: GetGamesParams, context: runtime.Context): Promise<Array<Game>>;

    /**
     */
    protected abstract putFrameImage(params: PutFrameImageParams, context: runtime.Context): Promise<void>;

    /**
     */
    protected abstract putFrameTitle(params: PutFrameTitleParams, context: runtime.Context): Promise<void>;


    constructor() {

        this.router.get('/games/{gameName}/frame/{frameId}/playData'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.handle_getFramePlayData(req, res);
            }
            catch (e) {
                this.processError(e, req, res);
            }
        });
        this.router.get('/games/{gameName}'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.handle_getGame(req, res);
            }
            catch (e) {
                this.processError(e, req, res);
            }
        });
        this.router.get('/games'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.handle_getGames(req, res);
            }
            catch (e) {
                this.processError(e, req, res);
            }
        });
        this.router.put('/games/{gameName}/frame/{frameId}/image'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.handle_putFrameImage(req, res);
            }
            catch (e) {
                this.processError(e, req, res);
            }
        });
        this.router.put('/games/{gameName}/frame/{frameId}/title'.replace(/{/g, ':').replace(/}/g, ''), async (req, res) => {
            try {
                await this.handle_putFrameTitle(req, res);
            }
            catch (e) {
                this.processError(e, req, res);
            }
        });
    }

    processError(e: any, req: Express.Request, res: Express.Response) {
        console.log(`Error occurred in : ${e}`)
        if (e.stack) {
            console.log(e.stack);
        }
        if (e.statusCode) {
            res.status(e.statusCode).send(e.message);
        }
        else {
            res.status(500).send(e.message);
        }
    }

    async handle_getFramePlayData(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};



        let gameName = req.params.gameName
        let frameId = req.params.frameId



        let params: GetFramePlayDataParams = {
            gameName,
            frameId,
        }

        const response = await this.getFramePlayData(params, context);


        res.json(FramePlayDataToJSON(response));

    }
    async handle_getGame(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};



        let gameName = req.params.gameName



        let params: GetGameParams = {
            gameName,
        }

        const response = await this.getGame(params, context);


        res.json(GameToJSON(response));

    }
    async handle_getGames(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};

        var channelId
        if (req.query.channelId !== undefined) {
             channelId = req.query.channelId.toString();
        }

        var channelService
        if (req.query.channelService !== undefined) {
             channelService = req.query.channelService.toString();
        }

        var sampleSize
        if (req.query.sampleSize !== undefined) {
		sampleSize = Number(req.query.sampleSize.toString());
        }

        var limit
        if (req.query.limit !== undefined) {
		limit = Number(req.query.limit.toString());
        }






        let params: GetGamesParams = {
            channelId,
            channelService,
            sampleSize,
            limit,
        }

        const response = await this.getGames(params, context);


        res.json(response.map(GameToJSON));

    }
    async handle_putFrameImage(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};



        let gameName = req.params.gameName
        let frameId = req.params.frameId

        let body = req.body


        let params: PutFrameImageParams = {
            gameName,
            frameId,
            body,
        }

        const response = await this.putFrameImage(params, context);


        res.sendStatus(200);

    }
    async handle_putFrameTitle(req: Express.Request, res: Express.Response) {

        const context: runtime.Context = {req, res};



        let gameName = req.params.gameName
        let frameId = req.params.frameId

        let framePlayTitleRequest = FramePlayTitleRequestFromJSON(req.body)


        let params: PutFrameTitleParams = {
            gameName,
            frameId,
            framePlayTitleRequest,
        }

        const response = await this.putFrameTitle(params, context);


        res.sendStatus(200);

    }
}
